package com.master.chapter015;

/**
 * @author ColorXJH
 * @version 1.0
 * @description: 多叉树
 * @date 2021/7/20 10:35
 */
public class MultiWayTreeTest {
    public static void main(String[] args) {

    }
}

//二叉树与B树
    //二叉树的原理分析
    //二叉树的操作操作效率较高，但是也存在问题
        //1：二叉树是需要加载到内存的，如果二叉树的节点较少，则没什么问题，但是如果二叉树的节点很多
            //比如一亿，就存在如下问题：
        //2：在构建二叉树时，需要多次进行i/o操作（海量数据存储在数据库或者文件中），节点海量，构建二叉树时
            //速度有影响
        //3：节点海量，也会造成二叉树的高度很大，会降低操作速度

//多叉树
    //1：在二叉树中，每个节点有数据项，最多有两个子节点，如果允许每个节点可以有更多的数据项和更多的子节点，就是多叉树
    //2：2-3树，2-3-4树就是多叉树，多叉树通过重新组织节点，减少树的高度，能多二叉树进行优化
    //3：下面列举一些2-3树
        //                16
        //          8 12       27         8 12  三节点     27  二节点
        //       7  10  14   17  29      7 10 14        17  29

//B树的基本介绍
    //B树通过重新组织节点，降低了树的高度，并且减少了i/o读写次数来提升效率
    //文件系统以及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页（页的大小通常为4K）
        //这样每个节点只需要一次i/o就可以完全载入
    //将树的度M设置为1024,在600亿个元素中最多只需要4次i/o操作就可以读取到想要的元素，B树（B+）广泛
        //应用于文件存储系统和数据库系统
//节点的度：一个节点有几个子节点就有几个度
//树的度：所有节点中节点的度最大的值

//2-3树 基本介绍
    //2-3树是最简单的B树结构，具有如下特征
    //1；2-3树的所有叶子节点都在同一层（只要是B树，都满足这个条件）
    //2：有两个子节点的节点叫做二节点，二节点要么没有子节点，要么有两个子节点
    //3：有三个子节点的节点叫做三节点，三节点要么没有子节点，要么有三个子节点
    //4：2-3树是由二节点和三节点构成的树


//2-3树应用案例
    //将数列【16，24，12，32，14，26，34，10，8，28，38，20】，构建成2-3树，并保证数据插入的大小顺序
    //插入规则：
        //1：2-3树的所有叶子节点都在同一层
        //2：有两个子节点的节点称为2节点 2/0，有三个子节点的节点称为3节点 3/0
        //3：当按照规则插入一个数据到某个节点时，不能满足上面2个要求，就需要拆
            //先向上拆，如果上层满，则拆本层，拆后仍要满足上面两个条件
        //4：对于三节点的子树的值，大小仍然遵循BST(二叉排序树)的规则

//过程如下
        //  16  ——》  16  24 --》    16           16                     16
        //                        12   24     12     24 32       12 14    24  32

        //              16  26                             16 26
        //      12  14     24      32           12 14       24     32 34

        //              16 26                                  16
        //      12        24     32 34                  12            26
        //    10  14  //违背所有叶子节点在同一层规则——》    10  14       24    32 34

        //              16                                16
        //          12      26                       12        26 32
        //      8 10   14  24   32 34            8 10  14    24  28  34

        //              16                                    16
        //          12       26 32                    12            26 32
        //     8 10   14   24   28   34 38      8 1O     14    20 24   28    34 38