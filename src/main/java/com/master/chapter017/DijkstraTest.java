package com.master.chapter017;

/**
 * @author ColorXJH
 * @version 1.0
 * @description: 迪杰斯特拉算法
 * @date 2021/10/21 12:32
 */
public class DijkstraTest {
    public static void main(String[] args) {

    }
}

//迪杰斯特拉算法：应用场景-最短路径问题
    //1：战争时期，胜利乡有7个村庄（六边形和中间一个顶点）A B C D E F G,现在有6个邮差，从G点出发，需要分别把
    //邮件送往ABCDEF六个村庄
    //2：各个村庄的距离用边线表示（权），比如A-B距离5公里
    //3：问如何计算出G村庄到其他村庄的最短距离
    //4：如果从其他点出发到各个点的最短距离又是多少？
//算法介绍：迪杰斯特拉算法是经典的最短路径算法，用于计算一个节点到其他节点的最短路径，他的主要特点是以起始点为中心
//向外层层扩展（广度优先搜索思想），直到扩展到终点未知
//算法过程如下：
    //设置出发点为v,顶点集合V{v1,v2,v3...}v到V中各个顶点的距离构成距离集合Dis,Dis{d1,d2,d3...},Dis集合记录着
    //v到图中各个顶点的距离（到自身可以看作0，v到v1距离为d1）
    //1：从Dis中选择最小的di,并移除Dis集合，同时移除V集合对应的顶点vi,此时的v到vi即为最短路径
    //2：更新集合Dis,更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个
        //（也是也更新顶点的前驱节点为vi,表明是通过vi到达的）
    //3：重复执行上面两步骤，直到最短路径顶点为目标顶点即可结束 178